version: 2.1

executors:
  gcp-executor:
    docker:
      - image: google/cloud-sdk:slim
    working_directory: ~/repo

jobs:
  deploy-to-gcp:
    executor: gcp-executor
    steps:
      - checkout

      - run:
          name: Install prerequisites
          command: |
            apt update && \
            apt install -y curl apt-transport-https ca-certificates gnupg

            # Import Google Cloud public key and store in keyring
            curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | \
            gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg

            # Add Google Cloud SDK repository
            echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" \
            > /etc/apt/sources.list.d/google-cloud-sdk.list

            # Update and install google-cloud-sdk
            apt update && apt install -y google-cloud-sdk

      - run:
          name: Authenticate to Google Cloud using Workload Identity Federation
          command: |
            # Create credential config using OIDC token from CircleCI
            export OIDC_TOKEN=$(echo $CIRCLE_OIDC_TOKEN)

            gcloud iam workload-identity-pools create-cred-config \
              "projects/57920515119/locations/global/workloadIdentityPools/circleci-pool/providers/circleci-provider" \
              --service-account="circleci-vm-deployer@sylvan-hydra-464904-d9.iam.gserviceaccount.com" \
              --credential-source-file=<(echo $OIDC_TOKEN) \
              --output-file="credentials.json"

            # Activate service account with generated credentials
            gcloud auth activate-service-account --key-file=credentials.json

      - run:
          name: Deploy app to GCP VM
          command: |
            # Check if VM exists
            if ! gcloud compute instances describe my-vm --zone asia-south1-c >/dev/null 2>&1; then
              echo "VM does not exist. Creating..."
              gcloud compute instances create my-vm \
                --zone asia-south1-c \
                --machine-type e2-medium \
                --tags http-server \
                --image-family debian-11 \
                --image-project debian-cloud \
                --metadata startup-script='#! /bin/bash
                  sudo apt update
                  sudo apt install -y python3-pip
                  pip3 install flask
                  cat << EOF > app.py
                  from flask import Flask
                  app = Flask(__name__)
                  @app.route("/")
                  def hello():
                      return "Hello from CircleCI and GCP VM!"
                  if __name__ == "__main__":
                      app.run(host="0.0.0.0", port=8080)
                  EOF
                  nohup python3 app.py &'
            else
              echo "VM already exists. Skipping creation."
            fi

      - run:
          name: Open firewall for port 8080
          command: |
            if ! gcloud compute firewall-rules describe allow-8080 >/dev/null 2>&1; then
              gcloud compute firewall-rules create allow-8080 \
                --allow tcp:8080 \
                --target-tags http-server \
                --description="Allow port 8080 access"
            else
              echo "Firewall rule for port 8080 already exists."
            fi

      - run:
          name: Print VM External IP
          command: |
            EXTERNAL_IP=$(gcloud compute instances describe my-vm --zone asia-south1-c \
              --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
            echo "Your application is deployed at http://$EXTERNAL_IP:8080"

workflows:
  deploy:
    jobs:
      - deploy-to-gcp
